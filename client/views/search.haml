!!!
%html{ :lang => 'en' }
  %head
    %link{:href => "stylesheets/stylesheet.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    = js 'jquery-1.4.3.min'
    = js 'jquery.scrollTo-1.4.2'
    = js 'jquery.timer'
    
    = js 'picky.min'
  %body
    .header
    -# %img{:src => "images/picky.png"}/
    .powered
      %h1 Powered by
      %p
        %a{ :href => "http://florianhanke.com/picky" } Picky (the helpful search engine)
    .try
      %h1 Fun things to try!
      %p
        Where is yajl used?
        %a{ :href => 'javascript:pickyClient.insert("yajl")' } yajl
        (then, click on "dependencies")
      %p
        How many gems use rspec?
        %a{ :href => 'javascript:pickyClient.insert("use:rspec")' } use:rspec
        (check the number)
      %p
        Gems that are by Kaspar that use flexmock:
        %a{ :href => 'javascript:pickyClient.insert("kaspar flexmock")' } kaspar flexmock
      %p
        The same, explicitly qualified:
        %a{ :href => 'javascript:pickyClient.insert("by:kaspar using:flexmock")' } by:kaspar using:flexmock
      %p
        Doesn't have to be "using:", can also be "needs:", or "dependency:"
        %a{ :href => 'javascript:pickyClient.insert("needs:rspec dependency:flexmock")' } needs:rspec dependency:flexmock
      %p
        Where did Eloy work on?
        %a{ :href => 'javascript:pickyClient.insert("author:eloy")' } author:eloy
        Just Eloy works as well:
        %a{ :href => 'javascript:pickyClient.insert("eloy")' } eloy
      %p
        What is DHH called again? Heynemeyer?
        %a{ :href => 'javascript:pickyClient.insert("heynemeyer~")' } heynemeyer~
      %p
        Hmm, it was a gem that started with "Pi", version 1.0.2.
        %a{ :href => 'javascript:pickyClient.insert("Pi* 1.0.2")' } Pi* 1.0.2
      %p
        The same, but at the end, the asterisk is not needed:
        %a{ :href => 'javascript:pickyClient.insert("1.0.2 Pi")' } 1.0.2 Pi
      %p
        How many gems are exactly version 1.0.0?
        %a{ :href => 'javascript:pickyClient.insert("1.0.0")' } 1.0.0
      %p
        Is picky 1.3 (and friends) already out?
        %a{ :href => 'javascript:pickyClient.insert("picky 1.3")' } picky 1.3
        (yes!)
      %p
        How about Rails 5?
        %a{ :href => 'javascript:pickyClient.insert("name:rails 5")' } name:rails 5
        (nooo!)
    %p
      = Picky::Helper.cached_interface
    :javascript
      pickyClient = new PickyClient({
        // A full query displays the rendered results.
        //
        full: '/search/full',
        
        // A live query just updates the count.
        //
        live: '/search/live',
        
        // showResultsLimit: 10, // Optional. Default is 10.
        
        // before: function(params, query, offset) {  }, // Optional. Before Picky sends any data.
        // success: function(data, query) {  }, // Optional. Just after Picky receives data. (Get a PickyData object)
        // after: function(data, query) {  }, // Optional. After Picky has handled the data and updated the view.
        
        // This is used to generate the correct query strings, localized. E.g. "subject:war".
        // Optional. If you don't give these, the field identifier given in the Picky server is used.
        //
        qualifiers: {
          en:{
            named: 'name',
            written: 'author',
            writer: 'author',
            using: 'dependencies',
            depends: 'dependencies',
            dependent: 'dependencies'
          }
        },
        
        // This is used to explain the preceding word in the suggestion text, localized. E.g. "Peter (author)".
        // Optional. Default are the field identifiers from the Picky server.
        //
        explanations: {
          en:{
            name: 'named',
            author: 'written by',
            versions: 'version',
            dependencies: 'using'
          }
        }
      });
      
      // An initial search text, prefilled.
      //
      pickyClient.insert('');