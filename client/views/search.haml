!!!
%html{ :lang => 'en' }
  %head
    %link{:href => "stylesheets/picky.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "stylesheets/gemsearch.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    
    = js 'jquery-1.5.0.min'
    = js 'jquery.address-1.3.2.min'
    = js 'picky.min'

    :javascript
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-21386078-1']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
  %body
    .header
      %img.logo{:src => "images/logo-love.png"}/
    .powered
      %h1 Powered by
      %p
        %a{ :href => "http://florianhanke.com/picky" } Picky (the helpful search engine)
      %p
        â€¦ on two
        %a{ :href => 'http://heroku.com' } Heroku
        instances, a worker each.
      %p
        Read more
        %a{ :href => 'http://florianhanke.com/blog/2011/02/13/a-better-rubygems-search.html' } in this blogpost
        \.
      %p
        &nbsp;
      %p
        The colors mean
      %p
        green: Yay, results!
      %p
        orange: Picky needs input.
      %p
        red: No results, sorry.
    .try
      %h1 Fun things to try!
      %p
        Where is sinatra used?
        %a{ :href => 'javascript:pickyClient.insert("sinatra")' } sinatra
        (then, click on "using")
      %p
        How many gems use rspec?
        %a{ :href => 'javascript:pickyClient.insert("use:rspec")' } use:rspec
        (check the number)
      %p
        Gems that are by Kaspar that use flexmock:
        %a{ :href => 'javascript:pickyClient.insert("kaspar flexmock")' } kaspar flexmock
      %p
        The same, explicitly qualified:
        %a{ :href => 'javascript:pickyClient.insert("by:kaspar using:flexmock")' } by:kaspar using:flexmock
      %p
        Doesn't have to be "using:", can also be "needs:", or "dependency:"
        %a{ :href => 'javascript:pickyClient.insert("needs:rspec dependency:flexmock")' } needs:rspec dependency:flexmock
      %p
        On what gems did Eloy work?
        %a{ :href => 'javascript:pickyClient.insert("author:eloy")' } author:eloy
        Just Eloy works as well:
        %a{ :href => 'javascript:pickyClient.insert("eloy")' } eloy
      %p
        What is DHH called again? Heynemeyer?
        %a{ :href => 'javascript:pickyClient.insert("heynemeyer~")' } heynemeyer~
      %p
        Hmm, it was a gem that started with "Pi", version 1.0.2.
        %a{ :href => 'javascript:pickyClient.insert("Pi* 1.0.2")' } Pi* 1.0.2
      %p
        The same, but at the end, the asterisk is not needed:
        %a{ :href => 'javascript:pickyClient.insert("1.0.2 Pi")' } 1.0.2 Pi
      %p
        How many gems are exactly version 1.0.0?
        %a{ :href => 'javascript:pickyClient.insert("1.0.0")' } 1.0.0
      %p
        Is picky 1.3 (and friends) already out?
        %a{ :href => 'javascript:pickyClient.insert("picky 1.3")' } picky 1.3
        (yes!)
      %p
        How about Rails 5?
        %a{ :href => 'javascript:pickyClient.insert("gem:rails 5")' } name:rails 5
        (noooo!)
    %p
      .search
        = Picky::Helper.cached_interface
    %p.notes
      Code:
      %a{ :href => 'http://github.com/floere/gemsearch/blob/2d0fafaef13907f9e164eafabcc961e3f0355759/server/app/application.rb#L13-56' } server config
      &amp; 
      %a{ :href => 'http://github.com/floere/gemsearch/blob/2d0fafaef13907f9e164eafabcc961e3f0355759/client/views/search.haml#L89-142' } client config
      \- Idea by
      %a{ :href => 'http://absurd.li' } Kaspar Schiess
      &amp; implementation by
      %a{ :href => 'http://florianhanke.com' } Florian Hanke
    :javascript
      $(window).load(function() {
        pickyClient = new PickyClient({
          // A full query displays the rendered results.
          //
          full: '/search/full',
        
          // A live query just updates the count.
          //
          // It's a good idea having this go to the search server directly.
          //
          live: '/search/live',
        
          // showResultsLimit: 10, // Optional. Default is 10.
        
          // before: function(params, query, offset) {  }, // Optional. Before Picky sends any data.
          // success: function(data, query) {  }, // Optional. Just after Picky receives data. (Get a PickyData object)
          // after: function(data, query) {  }, // Optional. After Picky has handled the data and updated the view.


          // Use this to group the choices (those are used when Picky needs more feedback).
          // If a category is missing, it is appended in a virtual group at the end.
          // Optional. Default is [].
          //
          // groups: [['author', 'title', 'subjects']],
          // This is used for formatting inside the choice groups.
          //
          // Use %n$s, where n is the position of the category in the key.
          // Optional. Default is {}.
          //
          choices: {
            'author,name': '%2$s, written by %1$s',
            'name,author': '%1$s, written by %2$s',
            'name,version': '%1$s, version %2$s',
            'version,name': '%1$s of %2$s',
            'name,dependencies': '%1$s, using %2$s',
            'dependencies,name': '%1$s used by %2$s',
            'author,dependencies': 'written by %1$s and using %2$s',
            'dependencies,author': 'using %1$s, written by %2$s',
            'dependencies,version': '%1$s used by version %2$s',
            'version,dependencies': '%2$s used by version %1$s',
            'summary,name': '%2$s with \"%1$s\" in summary',
            'name,summary': '%1$s with \"%2$s\" in summary',
            'summary,author': 'written by %2$s with \"%1$s\" in summary',
            'author,summary': 'written by %1$s with \"%2$s\" in summary'
          },
          
          // This is used to generate the correct query strings, localized. E.g. "subject:war".
          // Optional. If you don't give these, the field identifier given in the Picky server is used.
          //
          qualifiers: {
            en:{
              named: 'name',
              written: 'author',
              writer: 'author',
              using: 'dependencies',
              depends: 'dependencies',
              dependent: 'dependencies'
            }
          },
        
          // This is used to explain the preceding word in the suggestion text, localized. E.g. "Peter (author)".
          // Optional. Default are the field identifiers from the Picky server.
          //
          explanations: {
            en:{
              name: 'named',
              author: 'written by',
              versions: 'version',
              dependencies: 'using'
            }
          }
        });
        
        // An initial search text, prefilled
        // this one is passed through the query param q.
        //
        // Example: www.mysearch.com/?q=example
        //
        // If there isn't a q parameter (because it is empty), we try to
        // take it from the deep linking /#/?q parameter. 
        //
        pickyClient.insertFromURL('#{@query}');
      });